---
version: '2.0'

name: instance_expiration_global
description: Workbook that contains instance_expiration_workflows

workflows:
  create_daily_expiration_job:
    type: direct
    description: This workflow reacts to an event trigger and prepares the project expiration policy.
    tasks:
      create_mail_cron:
        description: 'Creates the cronjobs for the expiration job'
        action: mistral.cron_triggers_create
        input:
          name: "daily_project_expiration"
          workflow_identifier: instance_expiration_global.daily_global_expiration
          workflow_input: {}
          pattern: "0 0 * * *"

  daily_global_expiration:
    type: direct
    description: This workflow checks all the projects with expiration and reacts accordingly
    tasks:
      retrieve_all_projects:
        action: keystone.projects_list domain=default
        keep-result: false
        publish:
          projects: <% task(retrieve_all_projects).result.select(dict(id => $.id, type => $.get('type','none'),expire => $.get('expire','off'))).where($.type='personal').where($.expire='on') %>
        on-success:
          - launch_project_expirations

      launch_project_expirations:
        description: 'Reviews the expiration dates of the projects'
        with-items: project in <% $.projects %>
        workflow: instance_expiration_global.daily_project_expiration project=<% $.project %>

  daily_project_expiration:
    type: direct
    description: This workflow checks the expiration of machines and reacts accordingly.
    input:
      - project
    tasks:
      retrieve_all_instances:
        description: 'Gets all the instances in the project with their expiration dates'
        action: nova.servers_list
        input:
          search_opts:
            all_tenants: 1
            project_id: <% $.project.id %>
        publish:
          instances: <% task(retrieve_all_instances).result.select(dict(id => $.id, name => $.name, expire_at => $.metadata.get('expire_at', ''), user_id => $.user_id)) %>
        on-success:
          - launch_instance_expirations
  
      launch_instance_expirations:
        description: 'Reviews the expiration dates of the instances'
        with-items: instance in <% $.instances %>
        workflow: instance_expiration_global.daily_instance_expiration instance=<% $.instance %>

  daily_instance_expiration:
    type: direct
    description: This workflow checks the expiration of machines and reacts accordingly.
    input:
      - instance
    tasks:
      init:
        description: 'Initializes de variables used in the workflow'
        action: std.noop
        publish:
          today_date: <% now().replace(hour => 0, minute=>0, second=>0, microsecond=>0) %>
          max_expire_date: <% now().replace(hour => 0, minute=>0, second=>0, microsecond=>0) + timespan(days=>90) %>
          mail_dates: [37, 22, 14, 12, 10, 9, 8]
          pre_expire_date: 7
        on-success:
          - check_instance_expiration

      check_instance_expiration:
        description: 'Checks the instance expiration'
        action: std.noop
        on-success:
          - fix_instance_expiration: <% not $.instance.expire_at  or (datetime($.instance.expire_at) >  datetime(task(init).published.max_expire_date)) %>
          - process_instance_expiration: <% $.instance.expire_at and (datetime($.instance.expire_at) <= datetime(task(init).published.max_expire_date)) %>

      fix_instance_expiration:
        description: 'Fixes instance expiration'
        action: nova.servers_set_meta_item
        input: 
          server: <% $.instance.id %>
          key: expire_at
          value: <% task(init).published.get('max_expire_date') %>
        publish:
          instance: <% dict(id => $.instance.id, name => $.instance.name, expire_at => task(init).published.get('max_expire_date'), user_id => $.instance.user_id) %>
        on-success:
          - process_instance_expiration

      process_instance_expiration:
        description: 'Process instance expiration'
        action: std.noop
        on-success:
          - send_expiration_mail: <% (datetime($.instance.expire_at) - datetime(task(init).published.today_date)).days in task(init).published.mail_dates %>
          - pre_expire_instance: <% (datetime($.instance.expire_at) - datetime(task(init).published.today_date)).days = task(init).published.pre_expire_date %>
          - expire_instance: <% datetime(task(init).published.today_date) = datetime($.instance.expire_at) %>
          - failed_to_expire_instance: <% datetime(task(init).published.today_date) > datetime($.instance.expire_at) %>

      send_expiration_mail:
        description: 'Send warning mail about expiration'
        workflow: instance_expiration_global.mail_job instance=<% $.instance %>

      pre_expire_instance:
        description: 'Pre expire instance'
        workflow: instance_expiration_global.pre_expire_job instance=<% $.instance %>

      expire_instance:
        description: 'Expire instance'
        workflow: instance_expiration_global.expire_job instance=<% $.instance %>

      failed_to_expire_instance:
        description: 'The expiration date has passed notify administrators'
        workflow: instance_expiration_global.failed_expire_job instance=<% $.instance %>

  mail_job:
    type: direct
    description: This workflow sends a reminder to the end user than the machine is going to expire
    input:
      - instance
    tasks:
      send_mail:
        description: 'Sends an expiration warning mail to the end user'
        action: std.email
        input:
          to_addrs: ["<% $.instance.user_id %>@cern.ch"]
          subject: The instance <% $.instance.name %> is going to expire soon
          body: |
            The instance "<% $.instance.name %>" is going to expire on "<% $.instance.expire_at %>"
            Please review if you still need it and extend it if required.
            Cheers!
            -- Thanks, Cloud Infrastructure Team.
          from_addr:  'noreply@cern.ch'
          smtp_server: 'cernmx.cern.ch'

  extend_job:
    type: direct
    description: This workflow extends the expiration date
    input:
      - instance_id
    tasks:
      check_instance:
        description: 'Retrieves information about the instance'
        action: nova.servers_find id=<% $.instance_id %>
        publish:
          instance: <% dict(id => task(check_instance).result.id, expire_at => datetime(task(check_instance).result.metadata.expire_at) + timespan(days=>60)) %>
        on-success:
          - set_instance_metadata

      set_instance_metadata:
        description: 'Sets the expire_at metadata in the instance'
        action: nova.servers_set_meta_item
        input: 
          server: <% task(check_instance).published.instance.id %>
          key: expire_at
          value: <% task(check_instance).published.instance.expire_at %>

  pre_expire_job:
    type: direct
    description: This workflow forces the expiration of the machine
    input:
      - instance
    tasks:
      check_instance:
        description: 'Expires the instance'
        action: nova.servers_get server=<% $.instance.id %>
        on-success:
          - pre_expire_instance: <% task(check_instance).result.status = "ACTIVE" %>

      pre_expire_instance:
        description: 'Pre expires the instance'
        #action: nova.servers_stop server=<% $.instance.id %>
        action: std.noop
        on-success:
          - send_mail

      send_mail:
        description: 'Sends a success mail to the end user'
        action: std.email
        input:
          to_addrs: ["<% $.instance.user_id %>@cern.ch"]
          subject: The instance <% $.instance.name %> has expired
          body: |
            The instance "<% $.instance.name %>" has expired on "<% $.instance.expire_at %>"
            Cheers!
            -- Thanks, Cloud Infrastructure Team.
          from_addr:  'noreply@cern.ch'
          smtp_server: 'cernmx.cern.ch'

  expire_job:
    type: direct
    description: This workflow forces the expiration of the machine
    input:
      - instance
    tasks:
      check_instance:
        description: 'Expires the instance'
        action: nova.servers_get server=<% $.instance.id %>
        on-success:
          - expire_instance: <% task(check_instance).result.status = "ACTIVE" %>

      expire_instance:
        description: 'Expires the instance'
        #action: nova.servers_delete server=<% $.instance.id %>
        action: std.noop
        on-success:
          - send_mail

      send_mail:
        description: 'Sends a success mail to the end user'
        action: std.email
        input:
          to_addrs: ["<% $.instance.user_id %>@cern.ch"]
          subject: The instance <% $.instance.name %> has been deleted after its expiration
          body: |
            The instance "<% $.instance.name %>" has expired on "<% $.instance.expire_at %>"
            and has been deleted.
            Cheers!
            -- Thanks, Cloud Infrastructure Team.
          from_addr:  'noreply@cern.ch'
          smtp_server: 'cernmx.cern.ch'

  failed_expire_job:
    type: direct
    description: This workflow sends a mail to administrators about a failed instance
    input:
      - instance
    tasks:
      send_mail:
        description: 'Sends an error mail to the administrators'
        action: std.email
        input:
          to_addrs: ["cloud-infrastructure-expiration@cern.ch"]
          subject: The instance <% $.instance.name %> cannot be expired. Please check
          body: |
            The instance "<% $.instance.name %>" was configured to expire on "<% $.instance.expire_at %>"
            and this date has passed. Please check the instance.
            Cheers!
            -- Thanks, Cloud Infrastructure Team.
          from_addr:  'noreply@cern.ch'
          smtp_server: 'cernmx.cern.ch'
