---
version: '2.0'

instance_snapshot:
  type: direct
  description: |
      This workflow creates a snapshot of an instance.
      If the instance is boot from image, the snapshot will be stored in Glance.
      If it is not, the bootable volume will be stored in Cinder.
      It does as well a cleanup of the previous created snapshots and can stop the
      server for consistent snapshots.
  input:
    - instance
    - pattern: "{0}_snapshot_{1}"
    - max_snapshots: 0
    - wait: false
    - instance_stop: false
    - to_addr_success: null
    - to_addr_error: null

  tasks:
    check_server_by_name:
      description: 'Checks if there is an instance with the name specified as parameter'
      action: nova.servers_find name=<% $.instance %>
      publish:
        instance: <% task(check_server_by_name).result.id %>
      on-success:
        check_server
      on-error:
        check_server

    check_server:
      description: 'Retrieves information about the server and identifies if is a boot from image or boot from volume instance'
      action: nova.servers_find id=<% $.instance %>
      publish:
        server: <% dict(id => task(check_server).result.id, name => task(check_server).result.name, status => task(check_server).result.status) %>
        snapshot_name:  <% $.pattern.format(task(check_server).result.name, now().format("%Y%m%d%H%M")) %>
        snapshot_regex: <% $.pattern.format(task(check_server).result.name, '*') %>
        volume_ids: <% task(check_server).result.get('os-extended-volumes:volumes_attached').id %>
      on-success:
        - image_check_server_for_stop: <% task(check_server).result.image %>
        - identify_volumes: <% not task(check_server).result.image %>
      on-error:
        - error_task

    image_check_server_for_stop:
      description: 'Checks if the instance needs to be stopped'
      action: std.noop
      on-success:
        - image_stop_instance: <% $.instance_stop and task(check_server).published.server.status = 'ACTIVE' %>
        - image_snapshot: <% not $.instance_stop or not task(check_server).published.server.status = 'ACTIVE' %>
      on-error:
        - error_task

    image_stop_instance:
      description: 'Stops the instance for consistency'
      action: nova.servers_stop server=<% $.instance %>
      on-success:
        - wait_for_image_stop_instance
      on-error:
        - error_task

    wait_for_image_stop_instance:
      description: 'Waits until the instance is shutoff to continue'
      action: nova.servers_find id=<% $.instance %> status='SHUTOFF'
      retry:
        delay: 5
        count: 40
      on-success:
        - image_snapshot
      on-error:
        - error_task

    image_snapshot:
      description: 'Creates an snapshot of the instance'
      action: nova.servers_create_image server=<% task(check_server).published.server.id %> image_name=<% $.snapshot_name %>
      publish:
        i_snap_id: <% task(image_snapshot).result %>
      on-success:
        - wait_for_image_snapshot: <% $.wait %>
        - check_number_of_images: <% not $.wait %>
        - start_instance: <% not $.wait and $.instance_stop and task(check_server).published.server.status = 'ACTIVE'%>
      on-error:
        - error_task
        - start_instance: <% $.instance_stop and task(check_server).published.server.status = 'ACTIVE' %>

    wait_for_image_snapshot:
      description: 'Waits until the snapshot is flagged as saving'
      action: nova.images_find id=<% $.i_snap_id %> status='SAVING'
      retry:
        delay: 10
        count: 720
      on-success:
        - check_number_of_images
        - start_instance: <% $.instance_stop and task(check_server).published.server.status = 'ACTIVE' %>
      on-error:
        - error_task
        - start_instance: <% $.instance_stop and task(check_server).published.server.status = 'ACTIVE' %>

    check_number_of_images:
      description: 'Checks how many snapshots have been taken already'
      action: glance.images_list
      publish:
        images: <% task(check_number_of_images).result.where($.visibility='private').where(regex(task(check_server).published.snapshot_regex).matches($.name)).orderBy($.updated_at).id %>
      on-success:
        - cleanup_images: <% $.max_snapshots > 0 and task(check_number_of_images).result.where($.visibility='private').where(regex(task(check_server).published.snapshot_regex).matches($.name)).count() > $.max_snapshots %>
        - success_task: <% $.max_snapshots <= 0 or task(check_number_of_images).result.where($.visibility='private').where(regex(task(check_server).published.snapshot_regex).matches($.name)).count() <= $.max_snapshots %>
      on-error:
        - error_task
        
    cleanup_images:
      description: 'Deletes older snapshots if max_snapshots has been reached'
      with-items: image_id in <% $.images.take($.images.len() - $.max_snapshots) %>
      action: glance.image_delete image_id=<% $.image_id%>
      on-success:
        - success_task
      on-error:
        - error_task

    identify_volumes:
      description: 'Retrieves the bootable volume (mounted on /dev/vda)'
      with-items: volume_id in <% $.volume_ids %>
      action: cinder.volumes_get volume_id=<% $.volume_id %>
      publish:
        volume_id: <% task(identify_volumes).result.first().get("attachments").where($.device = '/dev/vda').volume_id.first() %>
      on-success:
        - volume_check_server_for_stop: <% task(identify_volumes).result.first().get("attachments").where($.device = '/dev/vda') %>
      on-error:
        - error_task

    volume_check_server_for_stop:
      description: 'Checks if the instance needs to be stopped'
      action: std.noop
      on-success:
        - volume_stop_instance: <% $.instance_stop and task(check_server).published.server.status = 'ACTIVE' %>
        - volume_snapshot: <% not $.instance_stop or not task(check_server).published.server.status = 'ACTIVE' %>
      on-error:
        - error_task

    volume_stop_instance:
      description: 'Stops the instance for consistency'
      action: nova.servers_stop server=<% $.instance %>
      on-success:
        - wait_for_volume_stop_instance
      on-error:
        - error_task

    wait_for_volume_stop_instance:
      description: 'Waits until the instance is shutoff to continue'
      action: nova.servers_find id=<% $.instance %> status='SHUTOFF'
      retry:
        delay: 5
        count: 40
      on-success:
        - volume_snapshot
      on-error:
        - error_task

    volume_snapshot:
      description: 'Creates a snapshot of the bootable volume'
      action: cinder.volume_snapshots_create volume_id=<% $.volume_id %> name=<% $.snapshot_name %> force=true
      publish:
        v_snap_id: <% task(volume_snapshot).result.id %>
      on-success:
        - wait_for_volume_snapshot: <% $.wait %>
        - check_number_of_volume_snapshots: <% not $.wait %>
        - start_instance: <% not $.wait and $.instance_stop and task(check_server).published.server.status = 'ACTIVE'%>
      on-error:
        - error_task
        - start_instance: <% $.instance_stop and task(check_server).published.server.status = 'ACTIVE' %>

    wait_for_volume_snapshot:
      description: 'Waits until the snapshot has been marked as available'
      action: cinder.volume_snapshots_find id=<% $.v_snap_id %> status='available'
      retry:
        delay: 5
        count: 40
      on-success:
        - check_number_of_volume_snapshots
        - start_instance: <% $.instance_stop and task(check_server).published.server.status = 'ACTIVE' %>
      on-error:
        - error_task
        - start_instance: <% $.instance_stop and task(check_server).published.server.status = 'ACTIVE' %>

    check_number_of_volume_snapshots:
      description: 'Checks how many snapshots have been taken already'
      action: cinder.volume_snapshots_list
      publish:
        snapshots: <% task(check_number_of_volume_snapshots).result.where($.status='available').where(regex(task(check_server).published.snapshot_regex).matches($.name)).orderBy($.updated_at).id %>
      on-success:
        - cleanup_volume_snapshots: <% $.max_snapshots > 0 and task(check_number_of_volume_snapshots).result.where($.status='available').where(regex(task(check_server).published.snapshot_regex).matches($.name)).count() > $.max_snapshots %>
        - success_task: <% $.max_snapshots <= 0 or task(check_number_of_volume_snapshots).result.where($.status='available').where(regex(task(check_server).published.snapshot_regex).matches($.name)).count() <= $.max_snapshots %>
      on-error:
        - error_task
        
    cleanup_volume_snapshots:
      description: 'Deletes older snapshots if max_snapshots has been reached'
      with-items: s_id in <% $.snapshots.take($.snapshots.len() - $.max_snapshots) %>
      action: cinder.volume_snapshots_delete snapshot=<% $.s_id %>
      on-success:
        - success_task
      on-error:
        - error_task

    start_instance:
      description: 'Starts the instance '
      action: nova.servers_start server=<% $.instance %>

    success_task:
      description: 'Checks if a success mail has to be sent to the end user'
      action: std.noop
      on-success:
        - send_success_mail:  <% $.to_addr_success %>

    error_task:
      description: 'Checks if an error mail has to be sent to the end user'
      action: std.noop
      on-success:
        - send_error_mail:  <% $.to_addr_error %>
        - fail

    send_success_mail:
      description: 'Sends a success mail to the end user'
      action: std.email
      input:
        to_addrs: <% $.to_addr_success %>
        subject: Instance Snapshot created successfully
        body: |
          The snapshot for the "<% $.instance %>"" has been created successfully.
          You can check the execution logs of the execution <% execution().id %>
          Cheers!
          -- Thanks, Cloud Infrastructure Team.
        from_addr:  'noreply@cern.ch'
        smtp_server: 'cernmx.cern.ch'

    send_error_mail:
      description: 'Sends an error mail to the end user'
      action: std.email
      input:
        to_addrs: <% $.to_addr_success %>
        subject: Instance Snapshot has failed
        body: |
          The snapshot for the "<% $.instance %>"" has failed
          Please check in the execution logs of the execution <% execution().id %>

          Cheers!
          -- Thanks, Cloud Infrastructure Team.
        from_addr:  'noreply@cern.ch'
        smtp_server: 'cernmx.cern.ch'

