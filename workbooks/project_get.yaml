---
version: '2.0'

name: project_get
description: Workbook that contains project_get workflows

workflows:
  init:
    type: direct
    input:
      - id

    output:
      id: <% $.id %>
      description: <% $.description %>
      owner: <% $.owner %>
      name: <% $.name %>
      enabled: <% $.enabled %>
      openstack_id: <% $.openstack_id %>
    tasks:
      project_get:
        action: keystone.projects_find
        input:
          tags: <% "fim_" + $.id %>
        publish:
          description: <% task(project_get).result.description %>
          name: <% task(project_get).result.name %>
          enabled: <% task(project_get).result.enabled %>
          openstack_id: <% task(project_get).result.id %>
        on-success:
          - get_owner_role

      get_owner_role:
        action: keystone.roles_find
        input:
          name: owner
        publish:
          role_owner_id: <% task(get_owner_role).result.id %>
        on-success:
        - get_project_owner

      get_project_owner:
        action: keystone.role_assignments_list
        input:
          role: <% $.role_owner_id %>
          project: <% $.openstack_id %>
        publish:
          owner: <% task(get_project_owner).result[0].user.id %>

  detailed:
    type: direct
    input:
      - id

    output:
      id: <% $.id %>
      description: <% $.description %>
      owner: <% $.owner %>
      name: <% $.name %>
      enabled: <% $.enabled %>
      allowOperators: <% $.allowOperators %>
      allowSupporters: <% $.allowSupporters %>
      services: <% $.services %>

    tasks:
      default_get:
        workflow: project_get.init
        input:
          id: <% $.id %>
        publish:
          description: <% task(default_get).result.description %>
          name: <% task(default_get).result.name %>
          enabled: <% task(default_get).result.enabled %>
          owner: <% task(default_get).result.owner %>
          openstack_id: <% task(default_get).result.openstack_id %>
        on-success:
          - get_operator_role
          - get_supporter_role
          - services

      get_operator_role:
        action: keystone.roles_find
        input:
          name: operator
        publish:
          role_operator_id: <% task(get_operator_role).result.id %>
        on-success:
          - allow_operators

      get_supporter_role:
        action: keystone.roles_find
        input:
          name: supporter
        publish:
          role_supporter_id: <% task(get_supporter_role).result.id %>
        on-success:
          - allow_supporters

      allow_operators:
        action: keystone.role_assignments_list
        input:
          role: <% $.role_operator_id %>
          project: <% $.openstack_id %>
        publish:
          allowOperators: <% bool(task(allow_operators).result) %>

      allow_supporters:
        action: keystone.role_assignments_list
        input:
          role: <% $.role_supporter_id %>
          project: <% $.openstack_id %>
        publish:
          allowSupporters: <% bool(task(allow_supporters).result) %>

      services:
        workflow: service_list.project
        input:
          project: <% $.openstack_id %>
        publish:
          services: <% task(services).result.services %>

  all:
    type: direct
    output:
      projects: <% $.projects %>

    tasks:
      get_owner_role:
        action: keystone.roles_find
        input:
          name: owner
        publish:
          role_owner_id: <% task(get_owner_role).result.id %>
        on-success:
        - retrieve_all_owners

      retrieve_all_owners:
        action: keystone.role_assignments_list
        input:
          role: <% $.role_owner_id %>
        keep-result: false
        publish:
          owners: <% dict(task(retrieve_all_owners).result.where($.scope.containsKey('project')).select(list($.scope.project.id,$.user.id))) %>
        on-success:
        - merge

      retrieve_all_projects:
        action: keystone.projects_list
        input:
          domain: "default"
        keep-result: false
        publish:
          projects_all: <% task(retrieve_all_projects).result.select(dict(openstack_id => $.id, name => $.name, description => $.description, enabled => $.enabled, id => switch($.tags.where($.startsWith("fim_")).len() = 1 => $.tags.where($.startsWith("fim_")).toList()[0].replace("fim_", ""), 1 = 1 => $.id))) %>
#          projects_all: <% task(retrieve_all_projects).result.select(dict(id => $.id, name => $.name, description => $.description, enabled => $.enabled)) %>
        on-success:
        - merge

      merge:
        join: all
        action: std.noop
        publish:
          projects: <% task(retrieve_all_projects).published.projects_all.select(dict(openstack_id => $.openstack_id, id => $.id, name => $.name, description => $.description, enabled => $.enabled, owner => task(retrieve_all_owners).published.owners.get($.openstack_id)))%>
