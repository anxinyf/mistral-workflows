---
version: '2.0'

name: service_delete
description: Workbook that contains the cleanup operations on services on a project

workflows:
  init:
    type: direct
    input:
      - id
    tasks:
      mistral:
        workflow: mistral
        input:
          id: <% $.id %>
        on-success:
          - nova

      magnum:
        workflow: magnum
        input:
          id: <% $.id %>
        on-success:
          - heat
          - barbican

      barbican:
        workflow: barbican
        input:
          id: <% $.id %>
        on-success:
          - nova

      heat:
        workflow: heat
        input:
          id: <% $.id %>
        on-success:
          - nova

      nova:
        join: all
        workflow: nova
        input:
          id: <% $.id %>
        on-success:
          - cinder
          - manila
          - neutron
          - s3

      cinder:
        workflow: cinder
        input:
          id: <% $.id %>
        on-success:
          - glance

      glance:
        workflow: glance
        input:
          id: <% $.id %>

      manila:
        workflow: manila
        input:
          id: <% $.id %>

      neutron:
        workflow: neutron
        input:
          id: <% $.id %>

      s3:
        workflow: s3
        input:
          id: <% $.id %>

  nova:
    description: Deletes all resources of a project on the compute service
    type: direct
    input:
      - id
    tasks:
      # Get all VMs in the project
      get_vms:
        action: nova.servers_list
        input:
          search_opts:
            all_tenants: true
            project_id: <% $.id %>
        publish:
          instances: <% task(get_vms).result.select(dict(id => $.id, name => $.name, status => $.status)) %>
        on-success:
          - delete_vms

      # Delete the VMs
      delete_vms:
        with-items: instance in <% $.instances %>
        workflow: nova_delete_instance instance=<% $.instance %>
        on-success:
          - quota_cleanup
        
      # Cleanup quota entries in nova
      quota_cleanup:
        action: nova.quotas_delete tenant_id=<% $.id %>

  nova_delete_instance:
    type: direct
    description: Deletes an instance on the compute service
    input:
      - instance
      - skip_status: []
    tasks:
      check_instance_status:
        description: 'Skip status not supported by the APIs'
        action: std.noop
        on-success:
          - unlock_instance: <% not $.instance.status in $.skip_status %>
          - delete_instance: <% $.instance.status in $.skip_status %>

      unlock_instance:
        description: 'Unlocks the instance'
        action: nova.servers_unlock server=<% $.instance.id %>
        on-success:
          - delete_instance
        on-error:
          - delete_instance

      delete_instance:
        action: nova.servers_delete server=<% $.instance.id %>

  cinder:
    description: Deletes all resources of a project on the blockstorage service
    type: direct
    input:
      - id
    tasks:
      # Get all volumes snapshots in the project
      get_snapshots:
        action: cinder.volume_snapshots_list
        input:
          search_opts:
            all_tenants: true
            project_id: <% $.id %>
        publish:
          snapshot_ids: <% task(get_snapshots).result.id %>
        on-success:
          - delete_snapshots
      # Delete the volume snapshots
      delete_snapshots:
        with-items: snapshot_id in <% $.snapshot_ids %>
        action: cinder.volume_snapshots_delete snapshot=<% $.snapshot_id %>
        on-success:
          - get_volumes
      # Get all volumes in the project
      get_volumes:
        action: cinder.volumes_list
        input:
          search_opts:
            all_tenants: true
            project_id: <% $.id %>
        publish:
          volume_ids: <% task(get_volumes).result.id %>
        on-success:
          - delete_volumes
      # Delete the volumes
      delete_volumes:
        with-items: volume_id in <% $.volume_ids %>
        action: cinder.volumes_delete volume=<% $.volume_id %>
        on-success:
          - quota_cleanup
      # Cleanup quota entries in cinder
      quota_cleanup:
        join: all
        action: cinder.quotas_delete tenant_id=<% $.id %>

  glance:
    description: Deletes all resources of a project on the image service
    type: direct
    input:
      - id
    tasks:
      # Get all images in the project
      get_images:
        action: glance.images_list
        input:
          filters:
            owner: <% $.id %>
        publish:
          image_ids: <% task(get_images).result.where($.visibility='private').id %>
        on-success:
          - unprotect_images

      unprotect_images:
        with-items: image_id in <% $.image_ids %>
        action: glance.images_update image_id=<% $.image_id %> protected=false
        on-success:
          - delete_images
        on-error:
          - delete_images

      delete_images:
        join: all
        with-items: image_id in <% $.image_ids %>
        action: glance.images_delete image_id=<% $.image_id %>

  manila:
    description: Deletes all resources of a project on the fileshare service
    type: direct
    input:
      - id
    tasks:
      # Get all shares in the project
      get_snapshots:
        action: manila.share_snapshots_list
        input:
          search_opts:
            all_tenants: true
            project_id: <% $.id %>
        publish:
          snapshot_ids: <% task(get_snapshots).result.id %>
        on-success:
          - delete_snapshots
      # Delete the share snapshots
      delete_snapshots:
        with-items: snapshot_id in <% $.snapshot_ids %>
        action: manila.share_snapshots_delete snapshot=<% $.snapshot_id %>
        on-success:
          - get_shares
      # Get all shares in the project
      get_shares:
        action: manila.shares_list
        input:
          search_opts:
            all_tenants: true
            project_id: <% $.id %>
        publish:
          share_ids: <% task(get_shares).result.id %>
        on-success:
          - delete_shares
      # Delete the shares
      delete_shares:
        with-items: share_id in <% $.share_ids %>
        action: manila.shares_delete share=<% $.share_id %>
        on-success:
          - quota_cleanup
      # Cleanup quota entries in manila
      quota_cleanup:
        join: all
        action: manila.quotas_delete tenant_id=<% $.id %>

  heat:
    description: Deletes all resources of a project on the orchestration service
    type: direct
    input:
      - id
    tasks:
      empty_task:
        action: std.noop

  barbican:
    description: Deletes all resources of a project on the key_manager service
    type: direct
    input:
      - id
    tasks:
      empty_task:
        action: std.noop

  neutron:
    description: Deletes all resources of a project on the network service
    type: direct
    input:
      - id
    tasks:
      empty_task:
        action: std.noop

  s3:
    description: Deletes all resources of a project on the s3 service
    type: direct
    input:
      - id
    tasks:
      empty_task:
        action: std.noop

  magnum:
    description: Deletes all resources of a project on the container infrastructure service
    type: direct
    input:
      - id
    tasks:
      empty_task:
        action: std.noop

  mistral:
    description: Deletes all resources of a project on the workflow service
    type: direct
    input:
      - id
    tasks:
      # TODO(jcastro) Add missing event trigger and cron trigger deletion
      # Get all workflows in the project
      get_workflows:
        action: mistral.workflows_list project_id=<% $.id %>
        publish:
          workflow_ids: <% task(get_workflows).result.id %>
        on-success:
          - delete_workflows
        on-error:
          # The service returns not found error if the filter does not match
          - empty_task
      # Delete all workflows
      delete_workflows:
        with-items: workflow_id in <% $.workflow_ids %>
        action: mistral.workflows_delete identifier=<% $.workflow_id %>
      empty_task:
        action: std.noop
