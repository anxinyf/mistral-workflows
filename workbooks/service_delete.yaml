---
version: '2.0'

name: service_delete
description: Workbook that contains the cleanup operations on services on a project

workflows:
  init:
    type: direct
    input:
      - id
    tasks:
      project_exists:
        action: keystone.projects_get project=<% $.id %>
        publish:
          project_id: <% task(project_exists).result.id %>
        on-success:
          - mistral
          - magnum

      mistral:
        workflow: mistral
        input:
          id: <% $.id %>
        on-success:
          - nova

      magnum:
        workflow: magnum
        input:
          id: <% $.id %>
        on-success:
          - heat
          - barbican

      barbican:
        workflow: barbican
        input:
          id: <% $.id %>
        on-success:
          - nova

      heat:
        workflow: heat
        input:
          id: <% $.id %>
        on-success:
          - nova

      nova:
        join: all
        workflow: nova
        input:
          id: <% $.id %>
        on-success:
          - cinder
          - manila
          - neutron

      cinder:
        workflow: cinder
        input:
          id: <% $.id %>
        on-success:
          - glance

      glance:
        workflow: glance
        input:
          id: <% $.id %>

      manila:
        workflow: manila
        input:
          id: <% $.id %>

      neutron:
        workflow: neutron
        input:
          id: <% $.id %>

  nova:
    description: Deletes all resources of a project on the compute service
    type: direct
    input:
      - id
    tasks:
      # Get all VMs in the project
      get_vms:
        action: nova.servers_list
        input:
          search_opts:
            all_tenants: true
            project_id: <% $.id %>
        publish:
          server_ids: <% task(get_vms).result.id %>
        on-success:
          - unlock_vms
      # Unlock the VMs
      unlock_vms:
        with-items: server_id in <% $.server_ids %>
        action: nova.servers_unlock server=<% $.server_id %>
        on-success:
          - delete_vms
      # Delete the VMs
      delete_vms:
        with-items: server_id in <% $.server_ids %>
        action: nova.servers_delete server=<% $.server_id %>
        retry: count=18 delay=10
        on-success:
          - quota_cleanup
      # Cleanup quota entries in nova
      quota_cleanup:
        action: nova.quotas_delete tenant_id=<% $.id %>

  cinder:
    description: Deletes all resources of a project on the blockstorage service
    type: direct
    input:
      - id
    tasks:
      # Get all volumes snapshots in the project
      get_snapshots:
        action: cinder.volume_snapshots_list
        input:
          search_opts:
            all_tenants: true
            project_id: <% $.id %>
        publish:
          snapshot_ids: <% task(get_snapshots).result.id %>
        on-success:
          - delete_snapshots
      # Delete the volume snapshots
      delete_snapshots:
        with-items: snapshot_id in <% $.snapshot_ids %>
        action: cinder.volume_snapshots_delete snapshot=<% $.snapshot_id %>
        retry: count=18 delay=10
        on-success:
          - quota_cleanup
      # Get all volumes in the project
      get_volumes:
        action: cinder.volumes_list
        input:
          search_opts:
            all_tenants: true
            project_id: <% $.id %>
        publish:
          volume_ids: <% task(get_volumes).result.id %>
        on-success:
          - delete_volumes
      # Delete the volumes
      delete_volumes:
        with-items: volume_id in <% $.volume_ids %>
        action: cinder.volumes_delete volume=<% $.volume_id %>
        retry: count=18 delay=10
        on-success:
          - quota_cleanup
      # Cleanup quota entries in cinder
      quota_cleanup:
        join: all
        action: cinder.quotas_delete tenant_id=<% $.id %>

  glance:
    description: Deletes all resources of a project on the image service
    type: direct
    input:
      - id
    tasks:
      empty_task:
        action: std.noop

  manila:
    description: Deletes all resources of a project on the fileshare service
    type: direct
    input:
      - id
    tasks:
      empty_task:
        action: std.noop

  heat:
    description: Deletes all resources of a project on the orchestration service
    type: direct
    input:
      - id
    tasks:
      empty_task:
        action: std.noop

  barbican:
    description: Deletes all resources of a project on the key_manager service
    type: direct
    input:
      - id
    tasks:
      empty_task:
        action: std.noop

  neutron:
    description: Deletes all resources of a project on the network service
    type: direct
    input:
      - id
    tasks:
      empty_task:
        action: std.noop

  magnum:
    description: Deletes all resources of a project on the container infrastructure service
    type: direct
    input:
      - id
    tasks:
      empty_task:
        action: std.noop

  mistral:
    description: Deletes all resources of a project on the workflow service
    type: direct
    input:
      - id
    tasks:
      # TODO(jcastro) Add missing event trigger and cron trigger deletion
      # Get all workflows in the project
      get_workflows:
        action: mistral.workflows_list project_id=<% $.id %>
        publish:
          workflow_ids: <% task(get_workflows).result.id %>
        on-success:
          - delete_workflows
        on-error:
          # The service returns not found error if the filter does not match
          - empty_task
      # Delete all workflows
      delete_workflows:
        with-items: workflow_id in <% $.workflow_ids %>
        action: mistral.workflows_delete identifier=<% $.workflow_id %>
        retry: count=18 delay=10
      empty_task:
        action: std.noop
