---
version: '2.0'

name: instance_expiration_global

workflows:
  create_daily_expiration_job:
    type: direct
    description: This workflow reacts to an event trigger and prepares the project expiration policy.
    tasks:
      create_mail_cron:
        description: 'Creates the cronjobs for the expiration job'
        action: mistral.cron_triggers_create
        input:
          name: "daily_project_expiration"
          workflow_identifier: instance_expiration_global.daily_global_expiration
          workflow_input: {}
          pattern: "0 0 * * *"

  daily_global_expiration:
    type: direct
    description: This workflow checks all the projects with expiration and reacts accordingly
    input:
      - region: "cern"
    tasks:
      retrieve_all_projects:
        action: keystone.projects_list
        input:
          domain: "default"
          tags_any: "expiration"
          enabled: "true"
        keep-result: false
        publish:
          projects: <% task(retrieve_all_projects).result.select(dict(id => $.id, name => $.name)) %>
        on-success:
          - launch_project_expirations

      launch_project_expirations:
        description: 'Reviews the expiration dates of the projects'
        with-items: project in <% $.projects %>
        concurrency: 400
        workflow: instance_expiration_global.daily_project_expiration
        input:
          project: <% $.project %>
          region: <% $.region %>

  daily_project_expiration:
    type: direct
    description: This workflow checks the expiration of machines and reacts accordingly.
    input:
      - project
      - region
    tasks:
      retrieve_project_owner:
        description: 'Gets the user with the owner role in the project'
        action: keystone.role_assignments_list
        keep-result: false
        input:
          project: <% $.project.id %>
          role: "c93214972afe4fccbdb78fea78c362cd"
        publish:
          owner: <% task(retrieve_project_owner).result.select($.user.id) %>
        on-success:
          - retrieve_all_instances

      retrieve_all_instances:
        description: 'Gets all the instances in the project with their expiration dates'
        action: nova.servers_list
        keep-result: false
        input:
          search_opts:
            all_tenants: 1
            project_id: <% $.project.id %>
          action_region: <% $.region %>
        retry:
          delay: 10
          count: 5
        publish:
          instances: <% task(retrieve_all_instances).result.select(dict(id => $.id, name => $.name, expire_at => $.metadata.get('expire_at', ''), status => $.status, user_id => $.user_id)) %>
        on-success:
          - launch_instance_expirations
  
      launch_instance_expirations:
        description: 'Reviews the expiration dates of the instances'
        with-items: instance in <% $.instances %>
        workflow: instance_expiration_global.daily_instance_expiration
        input:
          instance: <% $.instance %>
          project: <% $.project %>
          owner: <% $.owner %>
          region: <% $.region %>

  daily_instance_expiration:
    type: direct
    description: This workflow checks the expiration of machines and reacts accordingly.
    input:
      - instance
      - project
      - owner
      - region
    tasks:
      init:
        description: 'Initializes de variables used in the workflow'
        action: std.noop
        publish:
          today_date: <% now().replace(hour => 0, minute=>0, second=>0, microsecond=>0) %>
          max_expire_date: <% now().replace(hour => 0, minute=>0, second=>0, microsecond=>0) + timespan(days=>180) %>
          mail_dates: [30, 15, 7, 5, 3, 2, 1]
          regexp_date: '^\d{4}-\d{2}-\d{2}[ T]\d{2}:\d{2}:\d{2}\.\d{6}$'
          grace_period: 7
          skip_status: ['BUILD','ERROR']
        on-success:
          - check_instance_status

      check_instance_status:
        description: 'Skip status not supported by the APIs'
        action: std.noop
        on-success:
          - check_instance_expiration: <% not $.instance.status in $.skip_status %>

      check_instance_expiration:
        description: 'Checks the instance expiration'
        action: std.noop
        on-success:
          - fix_instance_expiration: <% not $.instance.expire_at or not regex(task(init).published.regexp_date).matches($.instance.expire_at) or (datetime($.instance.expire_at) >  datetime(task(init).published.max_expire_date)) %>
          - process_instance_expiration: <% $.instance.expire_at and regex(task(init).published.regexp_date).matches($.instance.expire_at) and (datetime($.instance.expire_at) <= datetime(task(init).published.max_expire_date)) %>

      fix_instance_expiration:
        description: 'Fixes instance expiration'
        action: nova.servers_set_meta_item
        input: 
          server: <% $.instance.id %>
          key: expire_at
          value: <% task(init).published.get('max_expire_date') %>
          action_region: <% $.region %>
        publish:
          instance: <% dict(id => $.instance.id, name => $.instance.name, expire_at => task(init).published.get('max_expire_date'), user_id => $.instance.user_id) %>
        on-success:
          - process_instance_expiration

      process_instance_expiration:
        description: 'Process instance expiration'
        action: std.noop
        on-success:
          - reminder_instance: <% (datetime($.instance.expire_at) - datetime(task(init).published.today_date)).days in task(init).published.mail_dates %>
          - expire_instance: <% datetime(task(init).published.today_date) = datetime($.instance.expire_at) %>
          - delete_instance: <% (datetime(task(init).published.today_date) - datetime($.instance.expire_at)).days = task(init).published.grace_period %>
          - failed_to_expire_instance: <% (datetime(task(init).published.today_date) - datetime($.instance.expire_at)).days > task(init).published.grace_period %>

      reminder_instance:
        description: 'Send warning mail about expiration'
        workflow: instance_expiration_global.reminder_job
        input:
          instance: <% $.instance %>
          project: <% $.project %>
          owner: <% $.owner %>

      expire_instance:
        description: 'Expire instance'
        workflow: instance_expiration_global.expire_job
        input:
          instance: <% $.instance %>
          project: <% $.project %>
          owner: <% $.owner %>
          region: <% $.region %>

      delete_instance:
        description: 'Delete instance'
        workflow: instance_expiration_global.delete_job
        input:
          instance: <% $.instance %>
          project: <% $.project %>
          owner: <% $.owner %>
          region: <% $.region %>

      failed_to_expire_instance:
        description: 'The expiration date has passed notify administrators'
        workflow: instance_expiration_global.failed_expire_job
        input:
          instance: <% $.instance %>
          project: <% $.project %>

  reminder_job:
    type: direct
    description: This workflow sends a reminder to the end user than the machine is going to expire
    input:
      - instance
      - project
      - owner
    tasks:
      send_mail_template:
        description: 'Retrieve template from Gitlab'
        workflow: send_mail_template
        input:
          to_addrs: <% $.owner.select(concat($,"@cern.ch")) %>
          bcc_addrs: [cloud-infrastructure-expiration@cern.ch]
          template: instance_expiration_reminder_mail
          replacements:
            "{instance}": <% $.instance.name %>
            "{expire_date}": <% datetime($.instance.expire_at).format("%d %B %Y") %>
            "{new_expire_date}": <% (now().replace(hour => 0, minute=>0, second=>0, microsecond=>0) + timespan(days=>180)).format("%d %B %Y") %>
            "{instance_id}": <% $.instance.id %>
            "{project_id}": <% $.project.id %>
            "{project_name}": <% $.project.name %>
            "{servicedesk_link}": 'https://cern.service-now.com/service-portal/report-ticket.do?name=request&fe=cloud-infrastructure'

  expire_job:
    type: direct
    description: This workflow forces the expiration of the machine
    input:
      - instance
      - project
      - owner
      - region
    tasks:
      check_instance:
        description: 'Expires the instance'
        action: nova.servers_get
        input:
          server: <% $.instance.id %>
          action_region: <% $.region %>
        on-success:
          - expire_instance

      expire_instance:
        description: 'Pre expires the instance'
        action: nova.servers_stop
        input:
          server: <% $.instance.id %>
          action_region: <% $.region %>
        on-success:
          - lock_instance
        on-error:
          - lock_instance

      lock_instance:
        description: 'Locks the instance'
        action: nova.servers_lock
        input:
          server: <% $.instance.id %>
          action_region: <% $.region %>
        on-success:
          - retrieve_template

      retrieve_template:
        description: 'Retrieve template from Gitlab'
        workflow: send_mail_template
        input:
          to_addrs: <% $.owner.select(concat($,"@cern.ch")) %>
          bcc_addrs: [cloud-infrastructure-expiration@cern.ch]
          template: instance_expiration_expired_mail
          replacements:
            "{instance}": <% $.instance.name %>
            "{expire_date}": <% datetime($.instance.expire_at).format("%d %B %Y") %>
            "{delete_date}": <% (datetime($.instance.expire_at) + timespan(days=>7)).format("%d %B %Y") %>
            "{project_name}": <% $.project.name %>
            "{servicedesk_link}": 'https://cern.service-now.com/service-portal/report-ticket.do?name=request&fe=cloud-infrastructure'

  delete_job:
    type: direct
    description: This workflow forces the expiration of the machine
    input:
      - instance
      - project
      - owner
      - region
    tasks:
      check_instance:
        description: 'Expires the instance'
        action: nova.servers_get
        input:
          server: <% $.instance.id %>
          action_region: <% $.region %>
        on-success:
          - unlock_instance

      unlock_instance:
        description: 'Unlocks the instance'
        action: nova.servers_unlock
        input:
          server: <% $.instance.id %>
          action_region: <% $.region %>
        on-success:
          - delete_instance

      delete_instance:
        description: 'Expires the instance'
        action: nova.servers_delete
        input:
          server: <% $.instance.id %>
          action_region: <% $.region %>
        on-success:
          - send_mail_template

      send_mail_template:
        description: 'Retrieve template from Gitlab'
        workflow: send_mail_template
        input:
          to_addrs: <% $.owner.select(concat($,"@cern.ch")) %>
          bcc_addrs: [cloud-infrastructure-expiration@cern.ch]
          template: instance_expiration_deleted_mail
          replacements:
            "{instance}": <% $.instance.name %>
            "{project_name}": <% $.project.name %>
            "{servicedesk_link}": 'https://cern.service-now.com/service-portal/report-ticket.do?name=request&fe=cloud-infrastructure'
 
  failed_expire_job:
    type: direct
    description: This workflow sends a mail to administrators about a failed instance
    input:
      - instance
      - project
    tasks:
      send_mail_template:
        description: 'Retrieve template from Gitlab'
        workflow: send_mail_template
        input:
          to_addrs: [cloud-infrastructure-expiration@cern.ch]
          template: instance_expiration_failed_mail
          replacements:
            "{instance}": <% $.instance.name %>
            "{expire_date}": <% datetime($.instance.expire_at).format("%d %B %Y") %>

  project_expiration_initialize:
    type: direct
    description: This workflow sets the initial expiration of machines. It is used to deploy the expiration lifecycle
    input:
      - project_id
      - region: "cern"
    tasks:
      project_exists:
        action: keystone.projects_get
        input:
          project: <% $.project_id %>
        publish:
          project_id: <% task(project_exists).result.id %>
        on-success:
          - project_set_expire_tag
          
      project_set_expire_tag:
        description: Sets the expire flag on the project
        action: keystone.projects_update
        input:
          project: <% $.project_id %>
          tags: ["expiration"]
        on-success:
          - retrieve_all_instances

      retrieve_all_instances:
        description: Gets all the instances in the project with their expiration dates if any
        action: nova.servers_list
        input:
          search_opts:
            all_tenants: 1
            project_id: <% $.project_id %>
          action_region: <% $.region %>
        publish:
          expire_date: <% now().replace(hour => 0, minute=>0, second=>0, microsecond=>0) + timespan(days=>180) %>
          instances: <% task(retrieve_all_instances).result.select(dict(id => $.id, name => $.name, expire_at => $.metadata.get('expire_at', ''), status => $.status)) %>
        on-success:
          - enable_instance_expirations

      enable_instance_expirations:
        description: Sets Reviews the expiration dates of the instances
        with-items: instance in <% $.instances %>
        workflow: instance_expiration_global.instance_expiration_initialize
        input:
          instance: <%$.instance %>
          expire_date: <% $.expire_date %>
          region: <% $.region %>

  instance_expiration_initialize:
    type: direct
    description: This workflow sets the initial expiration of a machine. It is used to deploy the expiration lifecycle
    input:
      - instance
      - expire_date
      - region
    tasks:
      init:
        description: Initializes de variables used in the workflow
        action: std.noop
        publish:
          max_expire_date: <% now().replace(hour => 0, minute=>0, second=>0, microsecond=>0) + timespan(days=>180) %>
          regexp_date: '^\d{4}-\d{2}-\d{2}[ T]\d{2}:\d{2}:\d{2}\.\d{6}$'
          skip_status: ['BUILDING','ERROR']
        on-success:
          - check_instance_expiration

      check_instance_expiration:
        description: Checks the instance expiration
        action: std.noop
        on-success:
          - set_instance_expiration: <% not $.instance.status in $.skip_status and (not $.instance.expire_at or not regex($.regexp_date).matches($.instance.expire_at) or (datetime($.instance.expire_at) > datetime($.max_expire_date))) %>
          
      set_instance_expiration:
        description: 'Fixes instance expiration'
        action: nova.servers_set_meta_item
        input: 
          server: <% $.instance.id %>
          key: expire_at
          value: <% $.expire_date %>
          action_region: <% $.region %>

  unexpire_instance:
    type: direct
    description: This workflow unexpires an instance
    input:
      - instance_id
      - region: "cern"
    tasks:
      check_instance:
        description: 'Retrieves information about the instance'
        action: nova.servers_get
        input:
          server: <% $.instance_id %>
          action_region: <% $.region %>
        publish:
          instance: <% dict(id => task(check_instance).result.id, name => task(check_instance).result.name, project_id => task(check_instance).result.tenant_id, expire_at => now().replace(hour => 0, minute=>0, second=>0, microsecond=>0) + timespan(days=>180)) %>
        on-success:
          - unlock_instance
          - get_project
          - get_project_owner

      get_project:
        description: 'Gets the name of the project'
        action: keystone.projects_get
        input:
          project: <% task(check_instance).published.instance.project_id %>
        publish:
          project_name: <% task(get_project).result.name %>
        on-success:
          - send_mail_template

      get_project_owner:
        description: 'Gets the user with the owner role in the project'
        action: keystone.role_assignments_list
        keep-result: false
        input:
          project: <% $.instance.project_id %>
          role: "c93214972afe4fccbdb78fea78c362cd"
        publish:
          owner: <% task(get_project_owner).result.select($.user.id) %>
        on-success:
          - send_mail_template

      unlock_instance:
        description: 'Unlocks the instance'
        action: nova.servers_unlock
        input:
          server: <% $.instance.id %>
          action_region: <% $.region %>
        on-success:
          - set_instance_metadata

      set_instance_metadata:
        description: 'Sets the expire_at metadata in the instance'
        action: nova.servers_set_meta_item
        input: 
          server: <% task(check_instance).published.instance.id %>
          key: expire_at
          value: <% task(check_instance).published.instance.expire_at %>
          action_region: <% $.region %>
        on-success:
          - start_instance

      start_instance:
        description: 'Starts the instance'
        action: nova.servers_start
        input:
          server: <% $.instance.id %>
          action_region: <% $.region %>
        on-success:
          - send_mail_template

      send_mail_template:
        join: all
        description: 'Retrieve template from Gitlab'
        workflow: send_mail_template
        input:
          to_addrs: <% $.owner.select(concat($,"@cern.ch")) %>
          bcc_addrs: [cloud-infrastructure-expiration@cern.ch]
          template: instance_expiration_unexpired_mail
          replacements:
            "{instance}": <% $.instance.name %>
            "{project_name}": <% $.project_name %>
            "{expire_date}": <% datetime($.instance.expire_at).format("%d %B %Y") %>
            "{servicedesk_link}": 'https://cern.service-now.com/service-portal/report-ticket.do?name=request&fe=cloud-infrastructure'
