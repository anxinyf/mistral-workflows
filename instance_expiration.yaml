---
version: '2.0'

name: instance_expiration
description: Workbook that contains instance_expiration_workflows

workflows:
  create_event_trigger:
    type: direct
    description: This workflow reacts to an event trigger and prepares the machine expiration policy.
    input:
      - instance_id

    tasks:
      check_instance:
        description: 'Retrieves information about the instance'
        action: nova.servers_find id=<% $.instance_id %>
        publish:
          instance: <% dict(id => task(check_instance).result.id, expire_at => now() + timespan(days=>90)) %>
        on-success:
          - set_instance_metadata

      set_instance_metadata:
        description: 'Sets the expire_at metadata in the instance'
        action: nova.servers_set_meta_item
        input: 
          server: <% task(check_instance).published.instance.id %>
          key: expire_at
          value: <% task(check_instance).published.instance.expire_at %>
        on-success:
          - create_mail_cron
          - create_expire_cron

      create_mail_cron:
        description: 'Creates the cronjobs for the expiration mail campaign'
        action: mistral.cron_triggers_create
        input:
          name: "<% task(check_instance).published.instance.id %>_expire_mail"
          workflow_identifier: instance_expiration.mail_job
          workflow_input: {'instance_id':'<% task(check_instance).published.instance.id %>'}
          pattern: "0 0 * * *"
          first_time: <% (datetime(task(check_instance).published.instance.expire_at) - timespan(days=>15)).format("%Y-%m-%d %H:%M")%>
          count: 14

      create_expire_cron:
        description: 'Creates the cronjobs for the expiration of the instance'
        action: mistral.cron_triggers_create
        input:
          name: "<% task(check_instance).published.instance.id %>_expire_job"
          workflow_identifier: instance_expiration.expire_job
          workflow_input: {'instance_id':'<% task(check_instance).published.instance.id %>'}
          pattern: "0 0 * * *"
          first_time: <% datetime(task(check_instance).published.instance.expire_at).format("%Y-%m-%d %H:%M") %>
          count: 1

  delete_event_trigger:
    type: direct
    description: This workflow reacts to an event trigger and cleans up the machine expiration policy.
    input:
      - instance_id

    tasks:
      delete_mail_cron:
        description: 'Deletes the cronjobs for the expiration mail campaign'
        action: mistral.cron_triggers_delete
        input:
          name: "<% $.instance_id %>_expire_mail"

      delete_expire_cron:
        description: 'Deletes the cronjobs for the expiration mail campaign'
        action: mistral.cron_triggers_delete
        input:
          name: "<% $.instance_id %>_expire_job"

  mail_job:
    type: direct
    description: This workflow sends a reminder to the end user than the machine is going to expire
    input:
      - instance_id
    tasks:
      check_instance:
        description: 'Retrieves information about the instance'
        action: nova.servers_find id=<% $.instance_id %>
        publish:
          instance: <% dict(id => task(check_instance).result.id, name => task(check_instance).result.name, expire_at => task(check_instance).result.metadata.expire_at, user_id => task(check_instance).result.user_id) %>
        on-success:
          - send_mail

      send_mail:
        description: 'Sends an expiration warning mail to the end user'
        action: std.email
        input:
          to_addrs: ["<% task(check_instance).published.instance.user_id %>@cern.ch"]
          subject: The instance <% task(check_instance).published.instance.name %> is going to expire soon
          body: |
            The instance "<% task(check_instance).published.instance.name %>" is going to expire on "<% task(check_instance).published.instance.expire_at %>"
            Please review if you still need it and extend it if required.
            Cheers!
            -- Thanks, Cloud Infrastructure Team.
          from_addr:  'noreply@cern.ch'
          smtp_server: 'cernmx.cern.ch'

  extend_job:
    type: direct
    description: This workflow extends the expiration date
    input:
      - instance_id
    tasks:
      check_instance:
        description: 'Retrieves information about the instance'
        action: nova.servers_find id=<% $.instance_id %>
        publish:
          instance: <% dict(id => task(check_instance).result.id, expire_at => datetime(task(check_instance).result.metadata.expire_at) + timespan(days=>60)) %>
        on-success:
          - set_instance_metadata

      set_instance_metadata:
        description: 'Sets the expire_at metadata in the instance'
        action: nova.servers_set_meta_item
        input: 
          server: <% task(check_instance).published.instance.id %>
          key: expire_at
          value: <% task(check_instance).published.instance.expire_at %>
        on-success:
          - delete_mail_cron
          - delete_expire_cron

      delete_mail_cron:
        description: 'Deletes the cronjobs for the expiration mail campaign'
        action: mistral.cron_triggers_delete
        input:
          name: "<% task(check_instance).published.instance.id %>_expire_mail"
        on-success:
          - create_mail_cron

      delete_expire_cron:
        description: 'Deletes the cronjobs for the expiration mail campaign'
        action: mistral.cron_triggers_delete
        input:
          name: "<% task(check_instance).published.instance.id %>_expire_job"
        on-success:
          - create_expire_cron

      create_mail_cron:
        description: 'Creates the cronjobs for the expiration mail campaign'
        action: mistral.cron_triggers_create
        input:
          name: "<% task(check_instance).published.instance.id %>_expire_mail"
          workflow_identifier: instance_expiration.mail_job
          workflow_input: {'instance_id':'<% task(check_instance).published.instance.id %>'}
          pattern: "0 0 * * *"
          first_time: <% (datetime(task(check_instance).published.instance.expire_at) - timespan(days=>15)).format("%Y-%m-%d %H:%M")%>
          count: 14

      create_expire_cron:
        description: 'Creates the cronjobs for the expiration of the instance'
        action: mistral.cron_triggers_create
        input:
          name: "<% task(check_instance).published.instance.id %>_expire_job"
          workflow_identifier: instance_expiration.expire_job
          workflow_input: {'instance_id':'<% task(check_instance).published.instance.id %>'}
          pattern: "0 0 * * *"
          first_time: <% datetime(task(check_instance).published.instance.expire_at).format("%Y-%m-%d %H:%M") %>
          count: 1

  expire_job:
    type: direct
    description: This workflow forces the expiration of the machine
    input:
      - instance_id

    tasks:
      check_instance:
        description: 'Retrieves information about the instance'
        action: nova.servers_find id=<% $.instance_id %>
        publish:
          instance: <% dict(id => task(check_instance).result.id, name => task(check_instance).result.name, expire_at => task(check_instance).result.metadata.expire_at, user_id => task(check_instance).result.user_id) %>
        on-success:
          - expire_instance
      
      expire_instance:
        description: 'Expires the instance'
        action: nova.servers_shelve
        input:
          server: <% task(check_instance).published.instance.id %>
        on-success:
          - send_mail

      send_mail:
        description: 'Sends a success mail to the end user'
        action: std.email
        input:
          to_addrs: ["<% task(check_instance).published.instance.user_id %>@cern.ch"]
          subject: The instance <% task(check_instance).published.instance.name %> has expired
          body: |
            The instance "<% task(check_instance).published.instance.name %>" has expired on "<% task(check_instance).published.instance.expire_at %>"
            Cheers!
            -- Thanks, Cloud Infrastructure Team.
          from_addr:  'noreply@cern.ch'
          smtp_server: 'cernmx.cern.ch'